import datetime
import database_manager
from task_model import Task
import logging

# Setup basic logging for the script itself
script_logger = logging.getLogger("add_test_task_script")
# Ensure handlers are configured if main_app isn't running to do it
if not logging.getLogger().hasHandlers():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)-8s - %(name)-25s - %(message)s')

def create_test_tasks_for_tomorrow_5am():
    conn = database_manager.create_connection()
    if not conn:
        script_logger.error("ADD_TEST_TASK: Failed to connect to DB.")
        return

    database_manager.create_table(conn)  # Ensure table exists

    # Calculate "tomorrow" and set time to 05:00 AM
    now = datetime.datetime.now()
    tomorrow = now.date() + datetime.timedelta(days=1)
    due_datetime_tomorrow_5am = datetime.datetime.combine(tomorrow, datetime.time(5, 0, 0))

    # For consistency in creation_date and last_reset_date if tasks are "created" slightly apart
    consistent_creation_time = now - datetime.timedelta(minutes=1) # Assume created a minute ago

    tasks_to_add = [
        {
            'title': "OneTime Tomorrow 5AM Test",
            'description': "Test one-time task for tomorrow 5 AM.",
            'duration': 30,
            'creation_date': consistent_creation_time.isoformat(),
            'repetition': 'None',
            'priority': 2,
            'category': "SchedulingTest",
            'due_date': due_datetime_tomorrow_5am.isoformat(),
            'status': 'Pending',
            'last_reset_date': consistent_creation_time.date().isoformat()
        },
        {
            'title': "Daily Tomorrow 5AM Test",
            'description': "Test daily repeating task for tomorrow 5 AM.",
            'duration': 45,
            'creation_date': consistent_creation_time.isoformat(),
            'repetition': 'Daily',
            'priority': 2,
            'category': "SchedulingTest",
            'due_date': due_datetime_tomorrow_5am.isoformat(),
            'status': 'Pending',
            'last_reset_date': consistent_creation_time.date().isoformat()
        }
    ]

    for task_data_dict in tasks_to_add:
        # id is None for new tasks, will be auto-generated by DB
        task_data_dict['id'] = None
        task_obj = Task(**task_data_dict)

        task_id = database_manager.add_task(conn, task_obj)
        if task_id:
            script_logger.info(f"ADD_TEST_TASK: Successfully added Task '{task_obj.title}' with ID {task_id}, Due: {task_obj.due_date}")
        else:
            script_logger.error(f"ADD_TEST_TASK: Failed to add Task '{task_obj.title}'.")

    conn.close()
    script_logger.info(f"ADD_TEST_TASK: Finished. Due date for tasks was intended for: {due_datetime_tomorrow_5am.isoformat()}")

if __name__ == '__main__':
    script_logger.info("ADD_TEST_TASK: Starting script to add tasks for tomorrow 5 AM.")
    create_test_tasks_for_tomorrow_5am()
    script_logger.info("ADD_TEST_TASK: Script finished.")
